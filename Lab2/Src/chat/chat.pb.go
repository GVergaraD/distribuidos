// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Libro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Nombre string `protobuf:"bytes,2,opt,name=Nombre,proto3" json:"Nombre,omitempty"`
	Partes string `protobuf:"bytes,3,opt,name=Partes,proto3" json:"Partes,omitempty"`
}

func (x *Libro) Reset() {
	*x = Libro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Libro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Libro) ProtoMessage() {}

func (x *Libro) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Libro.ProtoReflect.Descriptor instead.
func (*Libro) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Libro) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Libro) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *Libro) GetPartes() string {
	if x != nil {
		return x.Partes
	}
	return ""
}

type Chunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Chunk    []byte `protobuf:"bytes,3,opt,name=Chunk,proto3" json:"Chunk,omitempty"`
}

func (x *Chunks) Reset() {
	*x = Chunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunks) ProtoMessage() {}

func (x *Chunks) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunks.ProtoReflect.Descriptor instead.
func (*Chunks) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *Chunks) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Chunks) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Chunks) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type MessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta    string `protobuf:"bytes,1,opt,name=Respuesta,proto3" json:"Respuesta,omitempty"`
	NodoCulpable int32  `protobuf:"varint,2,opt,name=NodoCulpable,proto3" json:"NodoCulpable,omitempty"`
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MessageResponse) GetRespuesta() string {
	if x != nil {
		return x.Respuesta
	}
	return ""
}

func (x *MessageResponse) GetNodoCulpable() int32 {
	if x != nil {
		return x.NodoCulpable
	}
	return 0
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta []string `protobuf:"bytes,1,rep,name=Respuesta,proto3" json:"Respuesta,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetRespuesta() []string {
	if x != nil {
		return x.Respuesta
	}
	return nil
}

type Prop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Propuesta []int32 `protobuf:"varint,1,rep,packed,name=Propuesta,proto3" json:"Propuesta,omitempty"`
	ID        int32   `protobuf:"varint,2,opt,name=ID,proto3" json:"ID,omitempty"`
	Partes    int32   `protobuf:"varint,3,opt,name=Partes,proto3" json:"Partes,omitempty"`
}

func (x *Prop) Reset() {
	*x = Prop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Prop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Prop) ProtoMessage() {}

func (x *Prop) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Prop.ProtoReflect.Descriptor instead.
func (*Prop) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *Prop) GetPropuesta() []int32 {
	if x != nil {
		return x.Propuesta
	}
	return nil
}

func (x *Prop) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Prop) GetPartes() int32 {
	if x != nil {
		return x.Partes
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mensaje string `protobuf:"bytes,1,opt,name=Mensaje,proto3" json:"Mensaje,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{5}
}

func (x *Message) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

type Consult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tipo   string `protobuf:"bytes,1,opt,name=Tipo,proto3" json:"Tipo,omitempty"`
	Titulo string `protobuf:"bytes,2,opt,name=Titulo,proto3" json:"Titulo,omitempty"`
}

func (x *Consult) Reset() {
	*x = Consult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consult) ProtoMessage() {}

func (x *Consult) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consult.ProtoReflect.Descriptor instead.
func (*Consult) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{6}
}

func (x *Consult) GetTipo() string {
	if x != nil {
		return x.Tipo
	}
	return ""
}

func (x *Consult) GetTitulo() string {
	if x != nil {
		return x.Titulo
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDNode string `protobuf:"bytes,1,opt,name=IDNode,proto3" json:"IDNode,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{7}
}

func (x *Node) GetIDNode() string {
	if x != nil {
		return x.IDNode
	}
	return ""
}

type Log struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mensaje1 string `protobuf:"bytes,1,opt,name=Mensaje1,proto3" json:"Mensaje1,omitempty"`
	Mensaje2 string `protobuf:"bytes,2,opt,name=Mensaje2,proto3" json:"Mensaje2,omitempty"`
}

func (x *Log) Reset() {
	*x = Log{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Log) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Log) ProtoMessage() {}

func (x *Log) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Log.ProtoReflect.Descriptor instead.
func (*Log) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{8}
}

func (x *Log) GetMensaje1() string {
	if x != nil {
		return x.Mensaje1
	}
	return ""
}

func (x *Log) GetMensaje2() string {
	if x != nil {
		return x.Mensaje2
	}
	return ""
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0x47, 0x0a, 0x05, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x6d,
	0x62, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x53, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x6f,
	0x43, 0x75, 0x6c, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c,
	0x4e, 0x6f, 0x64, 0x6f, 0x43, 0x75, 0x6c, 0x70, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x28, 0x0a, 0x08,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x70,
	0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x22, 0x4c, 0x0a, 0x04, 0x50, 0x72, 0x6f, 0x70, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06,
	0x50, 0x61, 0x72, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x50, 0x61,
	0x72, 0x74, 0x65, 0x73, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x22, 0x35, 0x0a, 0x07, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x70, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x54, 0x69, 0x70, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x69, 0x74, 0x75,
	0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x69, 0x74, 0x75, 0x6c, 0x6f,
	0x22, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x44, 0x4e, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x44, 0x4e, 0x6f, 0x64, 0x65,
	0x22, 0x3d, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x73, 0x61,
	0x6a, 0x65, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x73, 0x61,
	0x6a, 0x65, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x32, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x32, 0x32,
	0x42, 0x0a, 0x0c, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x32, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x61, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x0b, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x32, 0x9d, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74,
	0x61, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x12, 0x0a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a,
	0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x08, 0x47, 0x65, 0x6e, 0x50,
	0x72, 0x6f, 0x70, 0x32, 0x12, 0x0a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0c, 0x50, 0x72, 0x65,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x1a, 0x0a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x22, 0x00, 0x32, 0x78, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x61, 0x72, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x12, 0x0c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x73, 0x1a,
	0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x65, 0x64, 0x69,
	0x72, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x0c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x73, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x4b, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x37, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x61, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x40, 0x0a, 0x10, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2c,
	0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x61, 0x72, 0x12, 0x0d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x1a, 0x0e, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x3f, 0x0a, 0x0a,
	0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x0b, 0x45, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x69, 0x72, 0x4c, 0x6f, 0x67, 0x12, 0x09, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x4c, 0x6f, 0x67, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_chat_proto_goTypes = []interface{}{
	(*Libro)(nil),           // 0: chat.Libro
	(*Chunks)(nil),          // 1: chat.Chunks
	(*MessageResponse)(nil), // 2: chat.MessageResponse
	(*Response)(nil),        // 3: chat.Response
	(*Prop)(nil),            // 4: chat.Prop
	(*Message)(nil),         // 5: chat.Message
	(*Consult)(nil),         // 6: chat.Consult
	(*Node)(nil),            // 7: chat.Node
	(*Log)(nil),             // 8: chat.Log
}
var file_chat_proto_depIdxs = []int32{
	0, // 0: chat.LibroService.PasarLibro:input_type -> chat.Libro
	7, // 1: chat.PropuestaService.GenProp:input_type -> chat.Node
	7, // 2: chat.PropuestaService.GenProp2:input_type -> chat.Node
	4, // 3: chat.PropuestaService.PregNameNode:input_type -> chat.Prop
	1, // 4: chat.ChunkService.PasarChunk:input_type -> chat.Chunks
	1, // 5: chat.ChunkService.PedirChunk:input_type -> chat.Chunks
	5, // 6: chat.ContactarService.ContactarNode:input_type -> chat.Message
	6, // 7: chat.ConsultarService.Consultar:input_type -> chat.Consult
	8, // 8: chat.LogService.EscribirLog:input_type -> chat.Log
	2, // 9: chat.LibroService.PasarLibro:output_type -> chat.MessageResponse
	2, // 10: chat.PropuestaService.GenProp:output_type -> chat.MessageResponse
	2, // 11: chat.PropuestaService.GenProp2:output_type -> chat.MessageResponse
	4, // 12: chat.PropuestaService.PregNameNode:output_type -> chat.Prop
	2, // 13: chat.ChunkService.PasarChunk:output_type -> chat.MessageResponse
	2, // 14: chat.ChunkService.PedirChunk:output_type -> chat.MessageResponse
	2, // 15: chat.ContactarService.ContactarNode:output_type -> chat.MessageResponse
	3, // 16: chat.ConsultarService.Consultar:output_type -> chat.Response
	2, // 17: chat.LogService.EscribirLog:output_type -> chat.MessageResponse
	9, // [9:18] is the sub-list for method output_type
	0, // [0:9] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Libro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Prop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Log); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LibroServiceClient is the client API for LibroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LibroServiceClient interface {
	PasarLibro(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*MessageResponse, error)
}

type libroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibroServiceClient(cc grpc.ClientConnInterface) LibroServiceClient {
	return &libroServiceClient{cc}
}

func (c *libroServiceClient) PasarLibro(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.LibroService/PasarLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibroServiceServer is the server API for LibroService service.
type LibroServiceServer interface {
	PasarLibro(context.Context, *Libro) (*MessageResponse, error)
}

// UnimplementedLibroServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLibroServiceServer struct {
}

func (*UnimplementedLibroServiceServer) PasarLibro(context.Context, *Libro) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasarLibro not implemented")
}

func RegisterLibroServiceServer(s *grpc.Server, srv LibroServiceServer) {
	s.RegisterService(&_LibroService_serviceDesc, srv)
}

func _LibroService_PasarLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Libro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibroServiceServer).PasarLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LibroService/PasarLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibroServiceServer).PasarLibro(ctx, req.(*Libro))
	}
	return interceptor(ctx, in, info, handler)
}

var _LibroService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.LibroService",
	HandlerType: (*LibroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasarLibro",
			Handler:    _LibroService_PasarLibro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// PropuestaServiceClient is the client API for PropuestaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PropuestaServiceClient interface {
	GenProp(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error)
	GenProp2(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error)
	PregNameNode(ctx context.Context, in *Prop, opts ...grpc.CallOption) (*Prop, error)
}

type propuestaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropuestaServiceClient(cc grpc.ClientConnInterface) PropuestaServiceClient {
	return &propuestaServiceClient{cc}
}

func (c *propuestaServiceClient) GenProp(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.PropuestaService/GenProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propuestaServiceClient) GenProp2(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.PropuestaService/GenProp2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propuestaServiceClient) PregNameNode(ctx context.Context, in *Prop, opts ...grpc.CallOption) (*Prop, error) {
	out := new(Prop)
	err := c.cc.Invoke(ctx, "/chat.PropuestaService/PregNameNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropuestaServiceServer is the server API for PropuestaService service.
type PropuestaServiceServer interface {
	GenProp(context.Context, *Node) (*MessageResponse, error)
	GenProp2(context.Context, *Node) (*MessageResponse, error)
	PregNameNode(context.Context, *Prop) (*Prop, error)
}

// UnimplementedPropuestaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPropuestaServiceServer struct {
}

func (*UnimplementedPropuestaServiceServer) GenProp(context.Context, *Node) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenProp not implemented")
}
func (*UnimplementedPropuestaServiceServer) GenProp2(context.Context, *Node) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenProp2 not implemented")
}
func (*UnimplementedPropuestaServiceServer) PregNameNode(context.Context, *Prop) (*Prop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PregNameNode not implemented")
}

func RegisterPropuestaServiceServer(s *grpc.Server, srv PropuestaServiceServer) {
	s.RegisterService(&_PropuestaService_serviceDesc, srv)
}

func _PropuestaService_GenProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropuestaServiceServer).GenProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.PropuestaService/GenProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropuestaServiceServer).GenProp(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropuestaService_GenProp2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropuestaServiceServer).GenProp2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.PropuestaService/GenProp2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropuestaServiceServer).GenProp2(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _PropuestaService_PregNameNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Prop)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropuestaServiceServer).PregNameNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.PropuestaService/PregNameNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropuestaServiceServer).PregNameNode(ctx, req.(*Prop))
	}
	return interceptor(ctx, in, info, handler)
}

var _PropuestaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.PropuestaService",
	HandlerType: (*PropuestaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenProp",
			Handler:    _PropuestaService_GenProp_Handler,
		},
		{
			MethodName: "GenProp2",
			Handler:    _PropuestaService_GenProp2_Handler,
		},
		{
			MethodName: "PregNameNode",
			Handler:    _PropuestaService_PregNameNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkServiceClient interface {
	PasarChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error)
	PedirChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) PasarChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ChunkService/PasarChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chunkServiceClient) PedirChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ChunkService/PedirChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServiceServer is the server API for ChunkService service.
type ChunkServiceServer interface {
	PasarChunk(context.Context, *Chunks) (*MessageResponse, error)
	PedirChunk(context.Context, *Chunks) (*MessageResponse, error)
}

// UnimplementedChunkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChunkServiceServer struct {
}

func (*UnimplementedChunkServiceServer) PasarChunk(context.Context, *Chunks) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasarChunk not implemented")
}
func (*UnimplementedChunkServiceServer) PedirChunk(context.Context, *Chunks) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PedirChunk not implemented")
}

func RegisterChunkServiceServer(s *grpc.Server, srv ChunkServiceServer) {
	s.RegisterService(&_ChunkService_serviceDesc, srv)
}

func _ChunkService_PasarChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).PasarChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChunkService/PasarChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).PasarChunk(ctx, req.(*Chunks))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChunkService_PedirChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).PedirChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChunkService/PedirChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).PedirChunk(ctx, req.(*Chunks))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChunkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasarChunk",
			Handler:    _ChunkService_PasarChunk_Handler,
		},
		{
			MethodName: "PedirChunk",
			Handler:    _ChunkService_PedirChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ContactarServiceClient is the client API for ContactarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactarServiceClient interface {
	ContactarNode(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
}

type contactarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContactarServiceClient(cc grpc.ClientConnInterface) ContactarServiceClient {
	return &contactarServiceClient{cc}
}

func (c *contactarServiceClient) ContactarNode(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ContactarService/ContactarNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactarServiceServer is the server API for ContactarService service.
type ContactarServiceServer interface {
	ContactarNode(context.Context, *Message) (*MessageResponse, error)
}

// UnimplementedContactarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContactarServiceServer struct {
}

func (*UnimplementedContactarServiceServer) ContactarNode(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContactarNode not implemented")
}

func RegisterContactarServiceServer(s *grpc.Server, srv ContactarServiceServer) {
	s.RegisterService(&_ContactarService_serviceDesc, srv)
}

func _ContactarService_ContactarNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactarServiceServer).ContactarNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ContactarService/ContactarNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactarServiceServer).ContactarNode(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ContactarService",
	HandlerType: (*ContactarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContactarNode",
			Handler:    _ContactarService_ContactarNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ConsultarServiceClient is the client API for ConsultarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConsultarServiceClient interface {
	Consultar(ctx context.Context, in *Consult, opts ...grpc.CallOption) (*Response, error)
}

type consultarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsultarServiceClient(cc grpc.ClientConnInterface) ConsultarServiceClient {
	return &consultarServiceClient{cc}
}

func (c *consultarServiceClient) Consultar(ctx context.Context, in *Consult, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/chat.ConsultarService/Consultar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsultarServiceServer is the server API for ConsultarService service.
type ConsultarServiceServer interface {
	Consultar(context.Context, *Consult) (*Response, error)
}

// UnimplementedConsultarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConsultarServiceServer struct {
}

func (*UnimplementedConsultarServiceServer) Consultar(context.Context, *Consult) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consultar not implemented")
}

func RegisterConsultarServiceServer(s *grpc.Server, srv ConsultarServiceServer) {
	s.RegisterService(&_ConsultarService_serviceDesc, srv)
}

func _ConsultarService_Consultar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsultarServiceServer).Consultar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConsultarService/Consultar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsultarServiceServer).Consultar(ctx, req.(*Consult))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConsultarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ConsultarService",
	HandlerType: (*ConsultarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Consultar",
			Handler:    _ConsultarService_Consultar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// LogServiceClient is the client API for LogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LogServiceClient interface {
	EscribirLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*MessageResponse, error)
}

type logServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLogServiceClient(cc grpc.ClientConnInterface) LogServiceClient {
	return &logServiceClient{cc}
}

func (c *logServiceClient) EscribirLog(ctx context.Context, in *Log, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.LogService/EscribirLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServiceServer is the server API for LogService service.
type LogServiceServer interface {
	EscribirLog(context.Context, *Log) (*MessageResponse, error)
}

// UnimplementedLogServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLogServiceServer struct {
}

func (*UnimplementedLogServiceServer) EscribirLog(context.Context, *Log) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscribirLog not implemented")
}

func RegisterLogServiceServer(s *grpc.Server, srv LogServiceServer) {
	s.RegisterService(&_LogService_serviceDesc, srv)
}

func _LogService_EscribirLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Log)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServiceServer).EscribirLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LogService/EscribirLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServiceServer).EscribirLog(ctx, req.(*Log))
	}
	return interceptor(ctx, in, info, handler)
}

var _LogService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.LogService",
	HandlerType: (*LogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EscribirLog",
			Handler:    _LogService_EscribirLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
