// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Libro struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombre string `protobuf:"bytes,1,opt,name=Nombre,proto3" json:"Nombre,omitempty"`
	Partes string `protobuf:"bytes,2,opt,name=Partes,proto3" json:"Partes,omitempty"`
}

func (x *Libro) Reset() {
	*x = Libro{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Libro) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Libro) ProtoMessage() {}

func (x *Libro) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Libro.ProtoReflect.Descriptor instead.
func (*Libro) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{0}
}

func (x *Libro) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *Libro) GetPartes() string {
	if x != nil {
		return x.Partes
	}
	return ""
}

type Chunks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	FileName string `protobuf:"bytes,2,opt,name=FileName,proto3" json:"FileName,omitempty"`
	Chunk    []byte `protobuf:"bytes,3,opt,name=Chunk,proto3" json:"Chunk,omitempty"`
}

func (x *Chunks) Reset() {
	*x = Chunks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Chunks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Chunks) ProtoMessage() {}

func (x *Chunks) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Chunks.ProtoReflect.Descriptor instead.
func (*Chunks) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{1}
}

func (x *Chunks) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Chunks) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *Chunks) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type MessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Respuesta string `protobuf:"bytes,1,opt,name=Respuesta,proto3" json:"Respuesta,omitempty"`
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{2}
}

func (x *MessageResponse) GetRespuesta() string {
	if x != nil {
		return x.Respuesta
	}
	return ""
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mensaje string `protobuf:"bytes,1,opt,name=Mensaje,proto3" json:"Mensaje,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetMensaje() string {
	if x != nil {
		return x.Mensaje
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IDNode string `protobuf:"bytes,1,opt,name=IDNode,proto3" json:"IDNode,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_chat_proto_rawDescGZIP(), []int{4}
}

func (x *Node) GetIDNode() string {
	if x != nil {
		return x.IDNode
	}
	return ""
}

var File_chat_proto protoreflect.FileDescriptor

var file_chat_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x68,
	0x61, 0x74, 0x22, 0x37, 0x0a, 0x05, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x6d,
	0x62, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x65, 0x73, 0x22, 0x4a, 0x0a, 0x06, 0x43,
	0x68, 0x75, 0x6e, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0x2f, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52,
	0x65, 0x73, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x22, 0x23, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x6e, 0x73, 0x61, 0x6a, 0x65, 0x22, 0x1e, 0x0a,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x44, 0x4e, 0x6f, 0x64, 0x65, 0x32, 0x42, 0x0a,
	0x0c, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x0a,
	0x0a, 0x50, 0x61, 0x73, 0x61, 0x72, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x12, 0x0b, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x4c, 0x69, 0x62, 0x72, 0x6f, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x42, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x75, 0x65, 0x73, 0x74, 0x61, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x6f, 0x70,
	0x12, 0x0a, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x1a, 0x15, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x43, 0x0a, 0x0c, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x50, 0x61, 0x73, 0x61, 0x72, 0x43, 0x68,
	0x75, 0x6e, 0x6b, 0x12, 0x0c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x73, 0x1a, 0x15, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x49, 0x0a, 0x0f, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a,
	0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x61, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x15, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_proto_rawDescOnce sync.Once
	file_chat_proto_rawDescData = file_chat_proto_rawDesc
)

func file_chat_proto_rawDescGZIP() []byte {
	file_chat_proto_rawDescOnce.Do(func() {
		file_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_proto_rawDescData)
	})
	return file_chat_proto_rawDescData
}

var file_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_chat_proto_goTypes = []interface{}{
	(*Libro)(nil),           // 0: chat.Libro
	(*Chunks)(nil),          // 1: chat.Chunks
	(*MessageResponse)(nil), // 2: chat.MessageResponse
	(*Message)(nil),         // 3: chat.Message
	(*Node)(nil),            // 4: chat.Node
}
var file_chat_proto_depIdxs = []int32{
	0, // 0: chat.LibroService.PasarLibro:input_type -> chat.Libro
	4, // 1: chat.PropuestaService.GenProp:input_type -> chat.Node
	1, // 2: chat.ChunkService.PasarChunk:input_type -> chat.Chunks
	3, // 3: chat.ContacarService.ContacarNode:input_type -> chat.Message
	2, // 4: chat.LibroService.PasarLibro:output_type -> chat.MessageResponse
	2, // 5: chat.PropuestaService.GenProp:output_type -> chat.MessageResponse
	2, // 6: chat.ChunkService.PasarChunk:output_type -> chat.MessageResponse
	2, // 7: chat.ContacarService.ContacarNode:output_type -> chat.MessageResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_chat_proto_init() }
func file_chat_proto_init() {
	if File_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Libro); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Chunks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   4,
		},
		GoTypes:           file_chat_proto_goTypes,
		DependencyIndexes: file_chat_proto_depIdxs,
		MessageInfos:      file_chat_proto_msgTypes,
	}.Build()
	File_chat_proto = out.File
	file_chat_proto_rawDesc = nil
	file_chat_proto_goTypes = nil
	file_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LibroServiceClient is the client API for LibroService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LibroServiceClient interface {
	PasarLibro(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*MessageResponse, error)
}

type libroServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLibroServiceClient(cc grpc.ClientConnInterface) LibroServiceClient {
	return &libroServiceClient{cc}
}

func (c *libroServiceClient) PasarLibro(ctx context.Context, in *Libro, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.LibroService/PasarLibro", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LibroServiceServer is the server API for LibroService service.
type LibroServiceServer interface {
	PasarLibro(context.Context, *Libro) (*MessageResponse, error)
}

// UnimplementedLibroServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLibroServiceServer struct {
}

func (*UnimplementedLibroServiceServer) PasarLibro(context.Context, *Libro) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasarLibro not implemented")
}

func RegisterLibroServiceServer(s *grpc.Server, srv LibroServiceServer) {
	s.RegisterService(&_LibroService_serviceDesc, srv)
}

func _LibroService_PasarLibro_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Libro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LibroServiceServer).PasarLibro(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.LibroService/PasarLibro",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LibroServiceServer).PasarLibro(ctx, req.(*Libro))
	}
	return interceptor(ctx, in, info, handler)
}

var _LibroService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.LibroService",
	HandlerType: (*LibroServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasarLibro",
			Handler:    _LibroService_PasarLibro_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// PropuestaServiceClient is the client API for PropuestaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PropuestaServiceClient interface {
	GenProp(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error)
}

type propuestaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPropuestaServiceClient(cc grpc.ClientConnInterface) PropuestaServiceClient {
	return &propuestaServiceClient{cc}
}

func (c *propuestaServiceClient) GenProp(ctx context.Context, in *Node, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.PropuestaService/GenProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropuestaServiceServer is the server API for PropuestaService service.
type PropuestaServiceServer interface {
	GenProp(context.Context, *Node) (*MessageResponse, error)
}

// UnimplementedPropuestaServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPropuestaServiceServer struct {
}

func (*UnimplementedPropuestaServiceServer) GenProp(context.Context, *Node) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenProp not implemented")
}

func RegisterPropuestaServiceServer(s *grpc.Server, srv PropuestaServiceServer) {
	s.RegisterService(&_PropuestaService_serviceDesc, srv)
}

func _PropuestaService_GenProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropuestaServiceServer).GenProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.PropuestaService/GenProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropuestaServiceServer).GenProp(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

var _PropuestaService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.PropuestaService",
	HandlerType: (*PropuestaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenProp",
			Handler:    _PropuestaService_GenProp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ChunkServiceClient is the client API for ChunkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChunkServiceClient interface {
	PasarChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error)
}

type chunkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChunkServiceClient(cc grpc.ClientConnInterface) ChunkServiceClient {
	return &chunkServiceClient{cc}
}

func (c *chunkServiceClient) PasarChunk(ctx context.Context, in *Chunks, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ChunkService/PasarChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChunkServiceServer is the server API for ChunkService service.
type ChunkServiceServer interface {
	PasarChunk(context.Context, *Chunks) (*MessageResponse, error)
}

// UnimplementedChunkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChunkServiceServer struct {
}

func (*UnimplementedChunkServiceServer) PasarChunk(context.Context, *Chunks) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasarChunk not implemented")
}

func RegisterChunkServiceServer(s *grpc.Server, srv ChunkServiceServer) {
	s.RegisterService(&_ChunkService_serviceDesc, srv)
}

func _ChunkService_PasarChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Chunks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChunkServiceServer).PasarChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChunkService/PasarChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChunkServiceServer).PasarChunk(ctx, req.(*Chunks))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChunkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChunkService",
	HandlerType: (*ChunkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PasarChunk",
			Handler:    _ChunkService_PasarChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}

// ContacarServiceClient is the client API for ContacarService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContacarServiceClient interface {
	ContacarNode(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error)
}

type contacarServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContacarServiceClient(cc grpc.ClientConnInterface) ContacarServiceClient {
	return &contacarServiceClient{cc}
}

func (c *contacarServiceClient) ContacarNode(ctx context.Context, in *Message, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, "/chat.ContacarService/ContacarNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContacarServiceServer is the server API for ContacarService service.
type ContacarServiceServer interface {
	ContacarNode(context.Context, *Message) (*MessageResponse, error)
}

// UnimplementedContacarServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContacarServiceServer struct {
}

func (*UnimplementedContacarServiceServer) ContacarNode(context.Context, *Message) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ContacarNode not implemented")
}

func RegisterContacarServiceServer(s *grpc.Server, srv ContacarServiceServer) {
	s.RegisterService(&_ContacarService_serviceDesc, srv)
}

func _ContacarService_ContacarNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContacarServiceServer).ContacarNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ContacarService/ContacarNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContacarServiceServer).ContacarNode(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContacarService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ContacarService",
	HandlerType: (*ContacarServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ContacarNode",
			Handler:    _ContacarService_ContacarNode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat.proto",
}
